# Input array function

def get_arr_input() -> list[float]:
    while True:
        user_input = input("Please input your numbers separated by spaces: ").split()
        try:
            numbers = [float(i) for i in user_input]
            if not numbers:
                print("No numbers entered. Please try again.")
                continue
            return sorted(numbers)
        except ValueError:
            print("Invalid input detected. Please enter only numbers.")

# Calculation functions

def get_user_selection() -> str:
    while True:
        user_input = input("""
Please select which method you want to use:
Sturges’ Rule (stu)
Square-root Choice (squ)      
Freedman–Diaconis Rule (fre)\n""").lower()
        if user_input in ["stu", "squ", "fre"]:
            return user_input
        else:
            print("Invalid input")

def median(array) -> float:
    array_length = len(array)
    mid = array_length // 2
    if array_length % 2 == 0:
        return (array[mid - 1] + array[mid]) / 2
    else:
        return array[mid]

def IQR_calculation(numbers) -> float:
    numbers_length = len(numbers)
    mid = numbers_length // 2
    if numbers_length % 2 == 0:
        lower_half = numbers[:mid]
        upper_half = numbers[mid:]
    else:
        lower_half = numbers[:mid]
        upper_half = numbers[mid+1:]

    return median(upper_half) - median(lower_half)

def struges_rule():
    pass

def square_root():
    pass

def freedman_diaconis(numbers):
    n = len(numbers)
    if n < 2:
        print("Not enough data to compute Freedman–Diaconis bins.")
        return 1

    iqr = IQR_calculation(numbers)
    if iqr == 0:
        print("IQR is 0; using default bin count (square-root rule fallback).")
        return int((n ** 0.5) + 0.9999)

    bin_width = 2 * iqr / (n ** (1/3))
    if bin_width == 0:
        print("Bin width is 0; using default bin count.")
        return int((n ** 0.5) + 0.9999)

    data_range = numbers[-1] - numbers[0]
    raw_bin_count = data_range / bin_width

    return max(1, int(raw_bin_count + 0.9999))

# Execution

print(freedman_diaconis(get_arr_input()))
